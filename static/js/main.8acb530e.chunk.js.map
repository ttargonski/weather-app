{"version":3,"sources":["components/SearchWeather.js","components/DisplayWeather.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchWeather","props","className","onChange","e","change","target","value","city","type","placeholder","onKeyPress","press","onClick","click","DisplayWeather","data","weather","err","time","content","name","description","main","temp","clouds","all","pressure","humidity","wind","speed","APIkey","App","state","handlePress","event","key","handleClick","handleChange","setState","currentAPI","fetch","then","response","ok","Error","json","console","log","Date","toLocaleString","catch","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAiBeA,EAfO,SAAAC,GACpB,OACE,yBAAKC,UAAU,UACb,2BACEC,SAAU,SAAAC,GAAC,OAAIH,EAAMI,OAAOD,EAAEE,OAAOC,QACrCA,MAAON,EAAMO,KACbC,KAAK,OACLC,YAAY,6BACZC,WAAY,SAAAP,GAAC,OAAIH,EAAMW,MAAMR,MAE/B,4BAAQS,QAAS,kBAAMZ,EAAMa,UAA7B,YC6BSC,EAvCQ,SAAAd,GAAU,IAAD,EACCA,EAAMe,KAA7BC,EADsB,EACtBA,QAASC,EADa,EACbA,IAAKC,EADQ,EACRA,KAElBC,EAAU,KA6Bd,OA3BY,IAARF,GAAiBD,EAAQI,OAC3BD,EACE,oCACE,0DACA,4BAAKH,EAAQI,MACb,4BAAKJ,EAAQA,QAAQ,GAAGK,aACxB,qDACwB,gCAASL,EAAQM,KAAKC,KAAtB,WAExB,6CACgB,gCAASP,EAAQQ,OAAOC,IAAxB,OAEhB,+CACa,gCAAST,EAAQM,KAAKI,SAAtB,SAEb,qDACc,gCAASV,EAAQM,KAAKK,SAAtB,OAEd,+DACmB,gCAASX,EAAQY,KAAKC,MAAtB,SAEnB,oCAAUX,GACV,8BAMJ,yBAAKjB,UAAU,WACZgB,EAAM,4DAAuCE,IC/B9CW,G,MAAS,oCAoEAC,E,2MAjEbC,MAAQ,CACNzB,KAAM,GACNS,QAAS,GACTC,IAAK,KACLC,KAAM,I,EAGRe,YAAc,SAAAC,GACM,UAAdA,EAAMC,KACR,EAAKC,e,EAITC,aAAe,SAAA/B,GACb,EAAKgC,SAAS,CACZ/B,KAAMD,K,EAIV8B,YAAc,WACZ,IAAMG,EAAU,4DAAwD,EAAKP,MAAMzB,KAAnE,kBAAiFuB,EAAjF,yBAChBU,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,4BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAA1B,GACJ+B,QAAQC,IAAI,qBACZ,IAAM7B,GAAO,IAAI8B,MAAOC,iBACxB,EAAKX,SAAS,CACZtB,QAASD,EACTG,KAAMA,EACND,KAAK,EACLV,KAAM,QAGT2C,OAAM,SAAAjC,GACL6B,QAAQC,IAAI,sBACZ,EAAKT,SAAS,CACZrB,KAAK,OAGX,EAAKqB,SAAS,CACZ/B,KAAM,M,wEAKR,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,CACEG,OAAQ+C,KAAKd,aACbxB,MAAOsC,KAAKf,YACZ7B,KAAM4C,KAAKnB,MAAMzB,KACjBI,MAAOwC,KAAKlB,cAEd,kBAAC,EAAD,CAAgBlB,KAAMoC,KAAKnB,a,GA5DjBoB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.8acb530e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchWeather = props => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        onChange={e => props.change(e.target.value)}\r\n        value={props.city}\r\n        type=\"text\"\r\n        placeholder=\"Wpisz nazwę miasta...\"\r\n        onKeyPress={e => props.press(e)}\r\n      />\r\n      <button onClick={() => props.click()}>Szukaj</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchWeather;\r\n","import React from \"react\";\r\n\r\nconst DisplayWeather = props => {\r\n  const { weather, err, time } = props.data;\r\n\r\n  let content = null;\r\n\r\n  if (err === false && weather.name) {\r\n    content = (\r\n      <>\r\n        <p>Aktualna pogoda dla miasta:</p>\r\n        <h1>{weather.name}</h1>\r\n        <h2>{weather.weather[0].description}</h2>\r\n        <h3>\r\n          Aktualna temperatura: <strong>{weather.main.temp} °C</strong>\r\n        </h3>\r\n        <h3>\r\n          Zachmurzenie: <strong>{weather.clouds.all} %</strong>\r\n        </h3>\r\n        <h3>\r\n          Ciśnienie: <strong>{weather.main.pressure} hPa</strong>\r\n        </h3>\r\n        <h3>\r\n          Wilgotność: <strong>{weather.main.humidity} %</strong>\r\n        </h3>\r\n        <h3>\r\n          Prędkość wiatru: <strong>{weather.wind.speed} m/s</strong>\r\n        </h3>\r\n        <p>Czas: {time}</p>\r\n        <p></p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"weather\">\r\n      {err ? <p>Nie znaleziono takiego miasta</p> : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayWeather;\r\n","import React, { Component } from \"react\";\nimport SearchWeather from \"./SearchWeather\";\nimport DisplayWeather from \"./DisplayWeather\";\nimport \"./App.scss\";\n\nconst APIkey = \"a49bd9d09b807b3e76b97a9d1d9d8375\";\n\nclass App extends Component {\n  state = {\n    city: \"\",\n    weather: {},\n    err: null,\n    time: \"\"\n  };\n\n  handlePress = event => {\n    if (event.key === \"Enter\") {\n      this.handleClick();\n    }\n  };\n\n  handleChange = value => {\n    this.setState({\n      city: value\n    });\n  };\n\n  handleClick = () => {\n    const currentAPI = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${APIkey}&units=metric&lang=pl`;\n    fetch(currentAPI)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Nie znaleziono miasta\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log(\"Pobrano bazę\");\n        const time = new Date().toLocaleString();\n        this.setState({\n          weather: data,\n          time: time,\n          err: false,\n          city: \"\"\n        });\n      })\n      .catch(err => {\n        console.log(\"Nie pobrano z bazy\");\n        this.setState({\n          err: true\n        });\n      });\n    this.setState({\n      city: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <SearchWeather\n          change={this.handleChange}\n          click={this.handleClick}\n          city={this.state.city}\n          press={this.handlePress}\n        ></SearchWeather>\n        <DisplayWeather data={this.state}></DisplayWeather>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}